// Generated by gencpp from file my_service/AddStrsRequest.msg
// DO NOT EDIT!


#ifndef MY_SERVICE_MESSAGE_ADDSTRSREQUEST_H
#define MY_SERVICE_MESSAGE_ADDSTRSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_service
{
template <class ContainerAllocator>
struct AddStrsRequest_
{
  typedef AddStrsRequest_<ContainerAllocator> Type;

  AddStrsRequest_()
    : first()
    , second()  {
    }
  AddStrsRequest_(const ContainerAllocator& _alloc)
    : first(_alloc)
    , second(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _first_type;
  _first_type first;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _second_type;
  _second_type second;





  typedef boost::shared_ptr< ::my_service::AddStrsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_service::AddStrsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AddStrsRequest_

typedef ::my_service::AddStrsRequest_<std::allocator<void> > AddStrsRequest;

typedef boost::shared_ptr< ::my_service::AddStrsRequest > AddStrsRequestPtr;
typedef boost::shared_ptr< ::my_service::AddStrsRequest const> AddStrsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_service::AddStrsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_service::AddStrsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_service::AddStrsRequest_<ContainerAllocator1> & lhs, const ::my_service::AddStrsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.first == rhs.first &&
    lhs.second == rhs.second;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_service::AddStrsRequest_<ContainerAllocator1> & lhs, const ::my_service::AddStrsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_service

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::my_service::AddStrsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_service::AddStrsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_service::AddStrsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_service::AddStrsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_service::AddStrsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_service::AddStrsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_service::AddStrsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c0d0db6e21f3fc1eb068f9cc22ba8beb";
  }

  static const char* value(const ::my_service::AddStrsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc0d0db6e21f3fc1eULL;
  static const uint64_t static_value2 = 0xb068f9cc22ba8bebULL;
};

template<class ContainerAllocator>
struct DataType< ::my_service::AddStrsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_service/AddStrsRequest";
  }

  static const char* value(const ::my_service::AddStrsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_service::AddStrsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string first\n"
"string second\n"
;
  }

  static const char* value(const ::my_service::AddStrsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_service::AddStrsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.first);
      stream.next(m.second);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AddStrsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_service::AddStrsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_service::AddStrsRequest_<ContainerAllocator>& v)
  {
    s << indent << "first: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.first);
    s << indent << "second: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.second);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_SERVICE_MESSAGE_ADDSTRSREQUEST_H
